devtools::build()           # Creates a .tar.gz file
devtools::install()         # Installs the package locally
devtools::install("/Users/yiming/Documents/GitHub/DA4BCI")
library(DA4BCI)
devtools::test()
#################
# Function to generate different distributions
#################
generate_data <- function(n_s, n_t, dist_type, fs = 50, t = 1) {
adjusted_n_s <- n_s * fs * t
adjusted_n_t <- n_t * fs * t
if (dist_type == 1) {
source_data <- matrix(rnorm(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Standard Normal Distribution"
} else if (dist_type == 2) {
source_data <- matrix(runif(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(runif(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Uniform Distribution"
} else if (dist_type == 3) {
source_data <- matrix(rnorm(adjusted_n_s * 50, mean = 5), adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50, mean = -5), adjusted_n_t, 50)
dist_name <- "Normal Distribution with Different Means"
} else if (dist_type == 4) {
source_data <- matrix(rexp(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(rexp(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Exponential Distribution"
} else if (dist_type == 5) {
source_data <- matrix(rnorm(adjusted_n_s * 50, sd = 2), adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50, sd = 0.5), adjusted_n_t, 50)
dist_name <- "Normal Dist with Diff. Standard Deviations"
} else if (dist_type == 6) {
source_data <- matrix(rpois(adjusted_n_s * 50, lambda = 3), adjusted_n_s, 50)
target_data <- matrix(rpois(adjusted_n_t * 50, lambda = 10), adjusted_n_t, 50)
dist_name <- "Poisson Distribution"
} else if (dist_type == 7) {
source_data <- matrix(rt(adjusted_n_s * 50, df = 5), adjusted_n_s, 50)
target_data <- matrix(rt(adjusted_n_t * 50, df = 10), adjusted_n_t, 50)
dist_name <- "Student's t-Distribution"
} else if (dist_type == 8) {
source_data <- matrix(rbinom(adjusted_n_s * 50, size = 10, prob = 0.3),
adjusted_n_s, 50)
target_data <- matrix(rbinom(adjusted_n_t * 50, size = 10, prob = 0.7),
adjusted_n_t, 50)
dist_name <- "Binomial Distribution"
} else if (dist_type == 9) {
source_data <- matrix(rnorm(adjusted_n_s * 50, mean = 0, sd = 1),
adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50, mean = 0, sd = 3),
adjusted_n_t, 50)
dist_name <- "Normal Dist with Diff. SD (another variant)"
} else if (dist_type == 10) {
source_data <- matrix(rnorm(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(rcauchy(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Normal and Cauchy Distribution"
}
# Generate random labels (0 or 1) for each row
source_label <- sample(0:1, adjusted_n_s, replace = TRUE)
target_label <- sample(0:1, adjusted_n_t, replace = TRUE)
return(list(source_data = source_data, target_data = target_data,
source_label = source_label, target_label = target_label,
dist_name = dist_name))
}
# 设置目标文件夹（保存图片）
pic_dir <- "~/Desktop/pic"  # 请根据实际情况修改
# 需要测试的域适配方法，新增了 "gfk"
DA_methods <- c("tca", "sa", "mida", "rd", "coral", "gfk")
# 并行设置
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
################
# Load packages
################
library(geigen)
library(MASS)
library(caret)
library(parallel)
library(doParallel)
library(foreach)
library(ggplot2)
library(gridExtra)
library(Rtsne)
#################
# Function to generate different distributions
#################
generate_data <- function(n_s, n_t, dist_type, fs = 50, t = 1) {
adjusted_n_s <- n_s * fs * t
adjusted_n_t <- n_t * fs * t
if (dist_type == 1) {
source_data <- matrix(rnorm(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Standard Normal Distribution"
} else if (dist_type == 2) {
source_data <- matrix(runif(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(runif(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Uniform Distribution"
} else if (dist_type == 3) {
source_data <- matrix(rnorm(adjusted_n_s * 50, mean = 5), adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50, mean = -5), adjusted_n_t, 50)
dist_name <- "Normal Distribution with Different Means"
} else if (dist_type == 4) {
source_data <- matrix(rexp(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(rexp(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Exponential Distribution"
} else if (dist_type == 5) {
source_data <- matrix(rnorm(adjusted_n_s * 50, sd = 2), adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50, sd = 0.5), adjusted_n_t, 50)
dist_name <- "Normal Dist with Diff. Standard Deviations"
} else if (dist_type == 6) {
source_data <- matrix(rpois(adjusted_n_s * 50, lambda = 3), adjusted_n_s, 50)
target_data <- matrix(rpois(adjusted_n_t * 50, lambda = 10), adjusted_n_t, 50)
dist_name <- "Poisson Distribution"
} else if (dist_type == 7) {
source_data <- matrix(rt(adjusted_n_s * 50, df = 5), adjusted_n_s, 50)
target_data <- matrix(rt(adjusted_n_t * 50, df = 10), adjusted_n_t, 50)
dist_name <- "Student's t-Distribution"
} else if (dist_type == 8) {
source_data <- matrix(rbinom(adjusted_n_s * 50, size = 10, prob = 0.3),
adjusted_n_s, 50)
target_data <- matrix(rbinom(adjusted_n_t * 50, size = 10, prob = 0.7),
adjusted_n_t, 50)
dist_name <- "Binomial Distribution"
} else if (dist_type == 9) {
source_data <- matrix(rnorm(adjusted_n_s * 50, mean = 0, sd = 1),
adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50, mean = 0, sd = 3),
adjusted_n_t, 50)
dist_name <- "Normal Dist with Diff. SD (another variant)"
} else if (dist_type == 10) {
source_data <- matrix(rnorm(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(rcauchy(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Normal and Cauchy Distribution"
}
# Generate random labels (0 or 1) for each row
source_label <- sample(0:1, adjusted_n_s, replace = TRUE)
target_label <- sample(0:1, adjusted_n_t, replace = TRUE)
return(list(source_data = source_data, target_data = target_data,
source_label = source_label, target_label = target_label,
dist_name = dist_name))
}
########################
# 主测试代码
########################
# 设置目标文件夹（保存图片）
pic_dir <- "~/Desktop/pic"  # 请根据实际情况修改
# 需要测试的域适配方法，新增了 "gfk"
DA_methods <- c("tca", "sa", "mida", "rd", "coral", "gfk")
# 并行设置
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
# 用一个列表收集各方法在不同分布下的结果
all_results <- list()
for(method_name in DA_methods) {
cat(">>> Testing method:", method_name, "\n")
# 对某个方法的结果进行并行
results_this_method <- foreach(i = 1:10,
.packages = c("ggplot2", "gridExtra",
"Rtsne","RSpectra","geigen","MASS")) %dopar% {
test_data <- generate_data(10, 10, dist_type = i, fs = 50, t = 3)
source_data <- test_data$source_data
target_data <- test_data$target_data
# 调用统一的 domain_adaptation() 或者 switch()，这里直接示例 switch
tm <- Sys.time()
da <- switch(method_name,
tca = domain_adaptation_tca(source_data, target_data,
k = 10, mu = 1e-5, sigma = 10),
sa = domain_adaptation_sa(source_data, target_data, k = 10),
mida = domain_adaptation_mida(source_data, target_data,
k = 10, max = TRUE),
rd = {
# RD 方法需要协方差，然后调用
cov_s <- cov(source_data)
cov_t <- cov(target_data)
rd_res <- domain_adaptation_riemannian(cov_s, cov_t)
list(weighted_source_data = source_data %*% rd_res$rotation_matrix,
target_data = target_data)
},
coral = {
domain_adaptation_coral(source_data, target_data, lambda = 1e-5)
},
gfk = {
# 需要定义 domain_adaptation_gfk()
# 这里假设参数 dim_subspace=10
domain_adaptation_gfk(source_data, target_data, dim_subspace = 10)
}
)
time_taken <- Sys.time() - tm
Z_s <- da$weighted_source_data
Z_t <- da$target_data
# 可视化
plots <- plot_data_comparison(source_data, target_data,
Z_s, Z_t, description = test_data$dist_name,
method = "pca")  # 如需 t-SNE可自行调整
title <- paste0("Method:", method_name,
" | DistType:", i,
" | Time: ", round(as.numeric(time_taken), 3), "s")
combined_plot <- grid.arrange(plots$p1, plots$p2, ncol = 2, top = title)
# 保存结果图片
combined_file <- file.path(pic_dir, paste0(method_name,
"_data_distribution_", i, ".png"))
ggsave(combined_file, combined_plot, width = 14, height = 7)
return(list(dist_type = i, time_taken = time_taken))
}
all_results[[method_name]] <- results_this_method
}
library(DA4BCI)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?domain_adaptation
library(DA4BCI)
devtools::install("/Users/yiming/Documents/GitHub/DA4BCI")
library(DA4BCI)
devtools::build()           # Creates a .tar.gz file
devtools::install()         # Installs the package locally
devtools::install("/Users/yiming/Documents/GitHub/DA4BCI")
devtools::build()           # Creates a .tar.gz file
devtools::install()         # Installs the package locally
devtools::install("/Users/yiming/Documents/GitHub/DA4BCI")
library(DA4BCI)
devtools::test()
library(testthat)
library(DA4BCI)
test_check("DA4BCI")
library(DA4BCI)
library(doParallel)
library(foreach)
library(ggplot2)
library(gridExtra)
library(Rtsne)
library(RSpectra)
library(geigen)
library(MASS)
# Example data-generation function
generate_data <- function(n_s, n_t, dist_type, fs = 50, t = 1) {
adj_n_s <- n_s * fs * t
adj_n_t <- n_t * fs * t
dist_name <- switch(
as.character(dist_type),
"1"  = "Standard Normal Distribution",
"2"  = "Uniform Distribution",
"3"  = "Normal Distribution with Different Means",
"4"  = "Exponential Distribution",
"5"  = "Normal Dist with Diff. SD",
"6"  = "Poisson Distribution",
"7"  = "Student's t-Distribution",
"8"  = "Binomial Distribution",
"9"  = "Normal Dist with Diff. SD (variant)",
"10" = "Normal and Cauchy Distribution",
stop("Invalid dist_type")
)
if (dist_type == 1) {
source_data <- matrix(rnorm(adj_n_s * 50), adj_n_s, 50)
target_data <- matrix(rnorm(adj_n_t * 50), adj_n_t, 50)
} else if (dist_type == 2) {
source_data <- matrix(runif(adj_n_s * 50), adj_n_s, 50)
target_data <- matrix(runif(adj_n_t * 50), adj_n_t, 50)
} else if (dist_type == 3) {
source_data <- matrix(rnorm(adj_n_s * 50, mean = 5), adj_n_s, 50)
target_data <- matrix(rnorm(adj_n_t * 50, mean = -5), adj_n_t, 50)
} else if (dist_type == 4) {
source_data <- matrix(rexp(adj_n_s * 50), adj_n_s, 50)
target_data <- matrix(rexp(adj_n_t * 50), adj_n_t, 50)
} else if (dist_type == 5) {
source_data <- matrix(rnorm(adj_n_s * 50, sd = 2), adj_n_s, 50)
target_data <- matrix(rnorm(adj_n_t * 50, sd = 0.5), adj_n_t, 50)
} else if (dist_type == 6) {
source_data <- matrix(rpois(adj_n_s * 50, lambda = 3), adj_n_s, 50)
target_data <- matrix(rpois(adj_n_t * 50, lambda = 10), adj_n_t, 50)
} else if (dist_type == 7) {
source_data <- matrix(rt(adj_n_s * 50, df = 5), adj_n_s, 50)
target_data <- matrix(rt(adj_n_t * 50, df = 10), adj_n_t, 50)
} else if (dist_type == 8) {
source_data <- matrix(rbinom(adj_n_s * 50, size = 10, prob = 0.3), adj_n_s, 50)
target_data <- matrix(rbinom(adj_n_t * 50, size = 10, prob = 0.7), adj_n_t, 50)
} else if (dist_type == 9) {
source_data <- matrix(rnorm(adj_n_s * 50), adj_n_s, 50)
target_data <- matrix(rnorm(adj_n_t * 50, sd = 3), adj_n_t, 50)
} else if (dist_type == 10) {
source_data <- matrix(rnorm(adj_n_s * 50), adj_n_s, 50)
target_data <- matrix(rcauchy(adj_n_t * 50), adj_n_t, 50)
}
# Optional: random labels
source_label <- sample(0:1, adj_n_s, replace = TRUE)
target_label <- sample(0:1, adj_n_t, replace = TRUE)
list(
source_data = source_data,
target_data = target_data,
source_label = source_label,
target_label = target_label,
dist_name = dist_name
)
}
# Placeholder domain adaptation functions (replace with actual implementations)
domain_adaptation_tca <- function(...) { list(weighted_source_data=..., target_data=...) }
domain_adaptation_sa <- function(...)  { list(weighted_source_data=..., target_data=...) }
domain_adaptation_mida <- function(...) { list(weighted_source_data=..., target_data=...) }
domain_adaptation_riemannian <- function(...) { list(rotation_matrix=diag(5)) }
domain_adaptation_coral <- function(...) { list(weighted_source_data=..., target_data=...) }
domain_adaptation_gfk <- function(...) { list(weighted_source_data=..., target_data=...) }
# Placeholder visualization function
plot_data_comparison <- function(sdata, tdata, Zs, Zt, description, method="pca") {
p1 <- ggplot() + ggtitle(paste("Before -", description))
p2 <- ggplot() + ggtitle(paste("After -", description))
list(p1=p1, p2=p2)
}
###########################################
# Main parallel testing code
###########################################
DA_methods <- c("tca", "sa", "mida", "rd", "coral", "gfk")
# Create a cluster and register it
library(parallel)
num_cores <- max(1, detectCores() - 1)
cl <- makeCluster(num_cores)
registerDoParallel(cl)
all_results <- list()
for (method_name in DA_methods) {
cat(">>> Testing method:", method_name, "\n")
# Parallel loop over distribution types 1..10
results_this_method <- foreach(
i = 1:10,
.packages = c("ggplot2","gridExtra","Rtsne","RSpectra","geigen","MASS")
) %dopar% {
# Generate data
test_data <- generate_data(10, 10, dist_type = i, fs = 50, t = 3)
source_data <- test_data$source_data
target_data <- test_data$target_data
start_time <- Sys.time()
# Call adaptation method
da <- switch(
method_name,
"tca" = domain_adaptation_tca(source_data, target_data, k=10, mu=1e-5, sigma=10),
"sa"  = domain_adaptation_sa(source_data, target_data, k=10),
"mida"= domain_adaptation_mida(source_data, target_data, k=10, max=TRUE),
"rd"  = {
cov_s <- cov(source_data)
cov_t <- cov(target_data)
rd_res <- domain_adaptation_riemannian(cov_s, cov_t)
list(weighted_source_data=source_data %*% rd_res$rotation_matrix,
target_data=target_data)
},
"coral"= domain_adaptation_coral(source_data, target_data, lambda=1e-5),
"gfk"  = domain_adaptation_gfk(source_data, target_data, dim_subspace=10)
)
elapsed <- Sys.time() - start_time
Z_s <- da$weighted_source_data
Z_t <- da$target_data
# Visualization: create a 2-plot arrangement for distribution i
plots <- plot_data_comparison(source_data, target_data, Z_s, Z_t,
description=test_data$dist_name, method="pca")
local_title <- paste0("DistType:", i, " | Time:", round(as.numeric(elapsed), 3), "s")
combined_plot <- grid.arrange(plots$p1, plots$p2, ncol=2, top=local_title)
# Return both plot and timing
list(
dist_type = i,
time_taken = elapsed,
subplot = combined_plot
)
}
# Combine the 10 subplots into a single figure
plot_list <- lapply(results_this_method, function(x) x$subplot)
final_plot <- do.call(
grid.arrange,
c(plot_list, ncol=1, top=paste("Method:", method_name))
)
# If you want to visualize each final_plot now, you can do so.
# No saving to disk as requested.
# Store the timing results (no saving images)
all_results[[method_name]] <- lapply(results_this_method, function(x) {
list(dist_type=x$dist_type, time_taken=x$time_taken)
})
}
################
# Load packages
################
library(geigen)
library(MASS)
library(caret)
library(parallel)
library(doParallel)
library(foreach)
library(ggplot2)
library(gridExtra)
library(Rtsne)
#################
# Function to generate different distributions
#################
generate_data <- function(n_s, n_t, dist_type, fs = 50, t = 1) {
adjusted_n_s <- n_s * fs * t
adjusted_n_t <- n_t * fs * t
if (dist_type == 1) {
source_data <- matrix(rnorm(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Standard Normal Distribution"
} else if (dist_type == 2) {
source_data <- matrix(runif(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(runif(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Uniform Distribution"
} else if (dist_type == 3) {
source_data <- matrix(rnorm(adjusted_n_s * 50, mean = 5), adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50, mean = -5), adjusted_n_t, 50)
dist_name <- "Normal Distribution with Different Means"
} else if (dist_type == 4) {
source_data <- matrix(rexp(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(rexp(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Exponential Distribution"
} else if (dist_type == 5) {
source_data <- matrix(rnorm(adjusted_n_s * 50, sd = 2), adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50, sd = 0.5), adjusted_n_t, 50)
dist_name <- "Normal Dist with Diff. Standard Deviations"
} else if (dist_type == 6) {
source_data <- matrix(rpois(adjusted_n_s * 50, lambda = 3), adjusted_n_s, 50)
target_data <- matrix(rpois(adjusted_n_t * 50, lambda = 10), adjusted_n_t, 50)
dist_name <- "Poisson Distribution"
} else if (dist_type == 7) {
source_data <- matrix(rt(adjusted_n_s * 50, df = 5), adjusted_n_s, 50)
target_data <- matrix(rt(adjusted_n_t * 50, df = 10), adjusted_n_t, 50)
dist_name <- "Student's t-Distribution"
} else if (dist_type == 8) {
source_data <- matrix(rbinom(adjusted_n_s * 50, size = 10, prob = 0.3),
adjusted_n_s, 50)
target_data <- matrix(rbinom(adjusted_n_t * 50, size = 10, prob = 0.7),
adjusted_n_t, 50)
dist_name <- "Binomial Distribution"
} else if (dist_type == 9) {
source_data <- matrix(rnorm(adjusted_n_s * 50, mean = 0, sd = 1),
adjusted_n_s, 50)
target_data <- matrix(rnorm(adjusted_n_t * 50, mean = 0, sd = 3),
adjusted_n_t, 50)
dist_name <- "Normal Dist with Diff. SD (another variant)"
} else if (dist_type == 10) {
source_data <- matrix(rnorm(adjusted_n_s * 50), adjusted_n_s, 50)
target_data <- matrix(rcauchy(adjusted_n_t * 50), adjusted_n_t, 50)
dist_name <- "Normal and Cauchy Distribution"
}
# Generate random labels (0 or 1) for each row
source_label <- sample(0:1, adjusted_n_s, replace = TRUE)
target_label <- sample(0:1, adjusted_n_t, replace = TRUE)
return(list(source_data = source_data, target_data = target_data,
source_label = source_label, target_label = target_label,
dist_name = dist_name))
}
########################
# 主测试代码
########################
# 设置目标文件夹（保存图片）
pic_dir <- "~/Desktop/pic"  # 请根据实际情况修改
# 需要测试的域适配方法，新增了 "gfk"
DA_methods <- c("tca", "sa", "mida", "rd", "coral", "gfk")
# 并行设置
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
# 用一个列表收集各方法在不同分布下的结果
all_results <- list()
for(method_name in DA_methods) {
cat(">>> Testing method:", method_name, "\n")
# 对某个方法的结果进行并行
results_this_method <- foreach(i = 1:10,
.packages = c("ggplot2", "gridExtra",
"Rtsne","RSpectra","geigen","MASS")) %dopar% {
test_data <- generate_data(10, 10, dist_type = i, fs = 50, t = 3)
source_data <- test_data$source_data
target_data <- test_data$target_data
# 调用统一的 domain_adaptation() 或者 switch()，这里直接示例 switch
tm <- Sys.time()
da <- switch(method_name,
tca = domain_adaptation_tca(source_data, target_data,
k = 10, mu = 1e-5, sigma = 10),
sa = domain_adaptation_sa(source_data, target_data, k = 10),
mida = domain_adaptation_mida(source_data, target_data,
k = 10, max = TRUE),
rd = {
# RD 方法需要协方差，然后调用
cov_s <- cov(source_data)
cov_t <- cov(target_data)
rd_res <- domain_adaptation_riemannian(cov_s, cov_t)
list(weighted_source_data = source_data %*% rd_res$rotation_matrix,
target_data = target_data)
},
coral = {
domain_adaptation_coral(source_data, target_data, lambda = 1e-5)
},
gfk = {
# 需要定义 domain_adaptation_gfk()
# 这里假设参数 dim_subspace=10
domain_adaptation_gfk(source_data, target_data, dim_subspace = 10)
}
)
time_taken <- Sys.time() - tm
Z_s <- da$weighted_source_data
Z_t <- da$target_data
# 可视化
plots <- plot_data_comparison(source_data, target_data,
Z_s, Z_t, description = test_data$dist_name,
method = "pca")  # 如需 t-SNE可自行调整
title <- paste0("Method:", method_name,
" | DistType:", i,
" | Time: ", round(as.numeric(time_taken), 3), "s")
combined_plot <- grid.arrange(plots$p1, plots$p2, ncol = 2, top = title)
# 保存结果图片
combined_file <- file.path(pic_dir, paste0(method_name,
"_data_distribution_", i, ".png"))
ggsave(combined_file, combined_plot, width = 14, height = 7)
return(list(dist_type = i, time_taken = time_taken))
}
all_results[[method_name]] <- results_this_method
}
