% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sa.R
\name{domain_adaptation_sa}
\alias{domain_adaptation_sa}
\title{Subspace Alignment (SA)}
\usage{
domain_adaptation_sa(source_data, target_data, k = 10)
}
\arguments{
\item{source_data}{A numeric matrix representing the source domain (rows = observations,
columns = features).}

\item{target_data}{A numeric matrix representing the target domain, with the same
number of columns as \code{source_data}.}

\item{k}{An integer specifying the number of principal components to retain
(default = 10). This value is capped by \code{min(ncol(source_data), ncol(target_data))}
to ensure PCA dimensions are valid for both domains.}
}
\value{
A list containing:
\describe{
\item{\code{weighted_source_data}}{The aligned source data, projected
into the target's subspace.}
\item{\code{target_data}}{The PCA-projected target data for consistent
representation.}
\item{\code{eigenvalue}}{The transformation matrix \eqn{W} used to align
the source principal components with the target's.}
}
}
\description{
The \code{domain_adaptation_sa} function aligns principal component subspaces
between the source and target data. By performing separate PCA on each domain,
it obtains principal components for both, then learns a linear transformation
matrix that maps the source subspace to the target subspace, effectively reducing
distribution mismatch in a lower-dimensional feature space.
}
\details{
\strong{Subspace Alignment} proceeds as follows:
\enumerate{
\item Perform PCA on \code{source_data} and \code{target_data} separately,
each extracting the top \code{k} principal components, denoted \eqn{Z_s} and
\eqn{Z_t}.
\item Compute the alignment matrix \eqn{W = Z_s^T Z_t}, which linearly maps
the source subspace onto the target subspace.
\item Project the original source data (in PCA space) using \eqn{W} to
obtain an aligned representation.
\item The target data is already in its own PCA space, so it's returned
for consistent comparison.
}
}
\examples{
\dontrun{
set.seed(123)
src <- matrix(rnorm(100), nrow = 20, ncol = 5)
tgt <- matrix(rnorm(100, mean = 2), nrow = 20, ncol = 5)

# Retain 3 principal components
sa_result <- domain_adaptation_sa(src, tgt, k = 3)
aligned_source <- sa_result$weighted_source_data
aligned_target <- sa_result$target_data

dim(aligned_source)  # 20 x 3
dim(aligned_target)  # 20 x 3
}

}
