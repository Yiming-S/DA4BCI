% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{kmm_weights}
\alias{kmm_weights}
\title{Kernel Mean Matching Weights}
\usage{
kmm_weights(Xs, Xt, sigma = NULL, B = 100, eps = NULL)
}
\arguments{
\item{Xs}{Numeric matrix (n × d): source samples.}

\item{Xt}{Numeric matrix (m × d): target samples.}

\item{sigma}{Optional positive bandwidth; defaults to \code{sigma_med(Xs, Xt)}.}

\item{B}{Positive upper bound for each weight.}

\item{eps}{Nonnegative tolerance on total weight; default \code{B / sqrt(n)}.}
}
\value{
Numeric vector (length n) with weights in \eqn{[0, B]}.
}
\description{
\code{kmm_weights} computes KMM reweighting coefficients for covariate shift
by solving a box-constrained QP via \code{quadprog::solve.QP}.
}
\details{
With RBF kernels \code{Kss} and \code{Kst} from \code{\link{rbf_kernel}},
minimize \eqn{\tfrac{1}{2} w^\top K_{ss} w - \kappa^\top w} subject to
\eqn{0 \le w_i \le B} and \eqn{|1^\top w - n| \le \varepsilon}, where
\eqn{\kappa=(n/m)K_{st}\mathbf{1}}. A small ridge is added to ensure PD.
}
\examples{
\dontrun{
set.seed(1)
Xs <- matrix(rnorm(200), 20, 10); Xt <- matrix(rnorm(150, 1), 15, 10)
w <- kmm_weights(Xs, Xt, B = 10); range(w)
}
}
\seealso{
\code{\link{sigma_med}}, \code{\link{distanceSummary}}

Other domain-adaptation: 
\code{\link{distanceSummary}()},
\code{\link{euclidean_alignment}()},
\code{\link{evaluate_shift}()},
\code{\link{label_shift_em}()},
\code{\link{proxy_a_distance}()}
}
\concept{domain-adaptation}
